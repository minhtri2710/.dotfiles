{"properties":{"intelephense.diagnostics.undefinedMethods":{"description":"Enables undefined method diagnostics.","scope":"window","default":true,"type":"boolean"},"intelephense.files.exclude":{"scope":"resource","items":{"type":"string"},"description":"Configure glob patterns to exclude certain files and folders from all language server features. Inherits from files.exclude.","default":["**\/.git\/**","**\/.svn\/**","**\/.hg\/**","**\/CVS\/**","**\/.DS_Store\/**","**\/node_modules\/**","**\/bower_components\/**","**\/vendor\/**\/{Tests,tests}\/**","**\/.history\/**","**\/vendor\/**\/vendor\/**"],"type":"array"},"intelephense.diagnostics.undefinedProperties":{"description":"Enables undefined static property diagnostics.","scope":"window","default":true,"type":"boolean"},"intelephense.licenceKey":{"description":"DEPRECATED. Don't use this. Go to command palette and search for enter licence key.","scope":"application","type":"string"},"intelephense.telemetry.enabled":{"description":"Anonymous usage and crash data will be sent to Azure Application Insights. Inherits from telemetry.enableTelemetry.","default":null,"scope":"window","type":["boolean","null"]},"intelephense.rename.exclude":{"scope":"resource","items":{"type":"string"},"description":"Glob patterns matching files and folders that should be excluded when renaming symbols. Rename operation will fail if the symbol definition is found in the excluded files\/folders.","default":["**\/vendor\/**"],"type":"array"},"intelephense.rename.namespaceMode":{"scope":"window","type":"string","description":"Controls the scope of a namespace rename operation.","enum":["single","all"],"default":"single","enumDescriptions":["Only symbols defined in the current file are affected. For example, this makes a rename of a namespace the equivalent of a single move class operation.","All symbols that share this namespace, not necessarily defined in the current file will be affected. For example it would move all classes that share this namespace to the new namespace."]},"intelephense.stubs":{"scope":"window","items":{"enum":["aerospike","amqp","apache","apcu","ast","bcmath","blackfire","bz2","calendar","cassandra","com_dotnet","Core","couchbase","couchbase_v2","crypto","ctype","cubrid","curl","date","dba","decimal","dio","dom","ds","eio","elastic_apm","enchant","Ev","event","exif","expect","fann","FFI","ffmpeg","fileinfo","filter","fpm","ftp","gd","gearman","geoip","geos","gettext","gmagick","gmp","gnupg","grpc","hash","http","ibm_db2","iconv","igbinary","imagick","imap","inotify","interbase","intl","json","judy","ldap","leveldb","libevent","libsodium","libvirt-php","libxml","lua","LuaSandbox","lzf","mailparse","mapscript","mbstring","mcrypt","memcache","memcached","meminfo","meta","ming","mongo","mongodb","mosquitto-php","mqseries","msgpack","mssql","mysql","mysql_xdevapi","mysqli","ncurses","newrelic","oauth","oci8","odbc","openssl","parallel","Parle","pcntl","pcov","pcre","pdflib","PDO","pdo_ibm","pdo_mysql","pdo_pgsql","pdo_sqlite","pgsql","Phar","phpdbg","posix","pq","pspell","pthreads","radius","random","rar","rdkafka","readline","recode","redis","Reflection","regex","rpminfo","rrd","SaxonC","session","shmop","simple_kafka_client","SimpleXML","snappy","snmp","soap","sockets","sodium","solr","SPL","SplType","SQLite","sqlite3","sqlsrv","ssh2","standard","stats","stomp","suhosin","superglobals","svm","svn","swoole","sybase","sync","sysvmsg","sysvsem","sysvshm","tidy","tokenizer","uopz","uploadprogress","uuid","uv","v8js","wddx","win32service","winbinder","wincache","wordpress","xcache","xdebug","xdiff","xhprof","xlswriter","xml","xmlreader","xmlrpc","xmlwriter","xsl","xxtea","yaf","yaml","yar","zend","Zend OPcache","ZendCache","ZendDebugger","ZendUtils","zip","zlib","zmq","zookeeper","zstd"],"type":"string"},"description":"Configure stub files for built in symbols and common extensions. The default setting includes PHP core and all bundled extensions.","default":["apache","bcmath","bz2","calendar","com_dotnet","Core","ctype","curl","date","dba","dom","enchant","exif","FFI","fileinfo","filter","fpm","ftp","gd","gettext","gmp","hash","iconv","imap","intl","json","ldap","libxml","mbstring","meta","mysqli","oci8","odbc","openssl","pcntl","pcre","PDO","pdo_ibm","pdo_mysql","pdo_pgsql","pdo_sqlite","pgsql","Phar","posix","pspell","random","readline","Reflection","session","shmop","SimpleXML","snmp","soap","sockets","sodium","SPL","sqlite3","standard","superglobals","sysvmsg","sysvsem","sysvshm","tidy","tokenizer","xml","xmlreader","xmlrpc","xmlwriter","xsl","Zend OPcache","zip","zlib"],"type":"array"},"intelephense.completion.insertUseDeclaration":{"description":"Use declarations will be automatically inserted for namespaced classes, traits, interfaces, functions, and constants.","scope":"window","default":true,"type":"boolean"},"intelephense.references.exclude":{"scope":"resource","items":{"type":"string"},"description":"Glob patterns matching files and folders that should be excluded from references search.","default":["**\/vendor\/**"],"type":"array"},"intelephense.completion.fullyQualifyGlobalConstantsAndFunctions":{"description":"Global namespace constants and functions will be fully qualified (prefixed with a backslash).","scope":"window","default":false,"type":"boolean"},"intelephense.phpdoc.returnVoid":{"description":"Adds `@return void` to auto generated phpdoc for definitions that do not return a value.","scope":"window","default":true,"type":"boolean"},"intelephense.completion.triggerParameterHints":{"description":"Method and function completions will include parentheses and trigger parameter hints.","scope":"window","default":true,"type":"boolean"},"intelephense.phpdoc.textFormat":{"scope":"window","type":"string","enum":["snippet","text"],"default":"snippet","enumDescriptions":["Auto generated phpdoc is returned in snippet format. Templates are partially resolved by evaluating phpdoc specific variables only.","Auto generated phpdoc is returned as plain text. Templates are resolved completely by the server."]},"intelephense.completion.maxItems":{"description":"The maximum number of completion items returned per request.","scope":"window","default":100,"type":"number"},"intelephense.format.enable":{"description":"Enables formatting.","scope":"window","default":true,"type":"boolean"},"intelephense.format.braces":{"scope":"window","type":"string","description":"Controls formatting style of braces","default":"psr12","enum":["psr12","allman","k&r"],"enumDescriptions":["PHP-FIG PSR-2 and PSR-12 style. A mix of Allman and K&R","Allman. Opening brace on the next line.","K&R (1TBS). Opening brace on the same line."]},"intelephense.phpdoc.propertyTemplate":{"scope":"window","description":"An object that describes the format of generated property phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.","properties":{"summary":{"description":"A snippet string representing a phpdoc summary.","type":"string"},"description":{"description":"A snippet string representing a phpdoc description.","type":"string"},"tags":{"items":{"type":"string"},"description":"An array of snippet strings representing phpdoc tags.","type":"array"}},"default":{"summary":"$1","tags":["@var ${1:$SYMBOL_TYPE}"]},"type":"object"},"intelephense.environment.documentRoot":{"description":"The directory of the entry point to the application (directory of index.php). Can be absolute or relative to the workspace folder. Used for resolving script inclusion and path suggestions.","scope":"resource","type":"string"},"intelephense.phpdoc.functionTemplate":{"scope":"window","description":"An object that describes the format of generated function\/method phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.","properties":{"summary":{"description":"A snippet string representing a phpdoc summary.","type":"string"},"description":{"description":"A snippet string representing a phpdoc description.","type":"string"},"tags":{"items":{"type":"string"},"description":"An array of snippet strings representing phpdoc tags.","type":"array"}},"default":{"summary":"$1","tags":["@param ${1:$SYMBOL_TYPE} $SYMBOL_NAME $2","@return ${1:$SYMBOL_TYPE} $2","@throws ${1:$SYMBOL_TYPE} $2"]},"type":"object"},"intelephense.environment.includePaths":{"items":{"type":"string"},"description":"The include paths (as individual path items) as defined in the include_path ini setting or paths to external libraries. Can be absolute or relative to the workspace folder. Used for resolving script inclusion and\/or adding external symbols to folder.","scope":"resource","type":"array"},"intelephense.trace.server":{"scope":"window","description":"Traces the communication between VSCode and the intelephense language server.","enum":["off","messages","verbose"],"default":"off","type":"string"},"intelephense.environment.phpVersion":{"description":"A semver compatible string that represents the target PHP version. Used for providing version appropriate suggestions and diagnostics. PHP 5.3.0 and greater supported.","scope":"window","default":"8.2.0","type":"string"},"intelephense.phpdoc.classTemplate":{"scope":"window","description":"An object that describes the format of generated class\/interface\/trait phpdoc. The following snippet variables are available: SYMBOL_NAME; SYMBOL_KIND; SYMBOL_TYPE; SYMBOL_NAMESPACE.","properties":{"summary":{"description":"A snippet string representing a phpdoc summary.","type":"string"},"description":{"description":"A snippet string representing a phpdoc description.","type":"string"},"tags":{"items":{"type":"string"},"description":"An array of snippet strings representing phpdoc tags.","type":"array"}},"default":{"summary":"$1","tags":["@package ${1:$SYMBOL_NAMESPACE}"]},"type":"object"},"intelephense.phpdoc.useFullyQualifiedNames":{"description":"Fully qualified names will be used for types when true. When false short type names will be used and imported where appropriate. Overrides intelephense.completion.insertUseDeclaration.","scope":"window","default":false,"type":"boolean"},"intelephense.environment.shortOpenTag":{"description":"When enabled '<?' will be parsed as a PHP open tag. Defaults to true.","scope":"window","default":true,"type":"boolean"},"intelephense.maxMemory":{"description":"Maximum memory (in MB) that the server should use. On some systems this may only have effect when runtime has been set. Minimum 256.","scope":"window","type":"number"},"intelephense.diagnostics.enable":{"description":"Enables diagnostics.","scope":"window","default":true,"type":"boolean"},"intelephense.runtime":{"description":"Path to a Node.js executable. Use this if you wish to use a different version of Node.js. Defaults to Node.js shipped with VSCode.","scope":"machine","type":"string"},"intelephense.diagnostics.run":{"scope":"window","type":"string","description":"Controls when diagnostics are run.","default":"onType","enum":["onType","onSave"],"enumDescriptions":["Diagnostics will run as changes are made to the document.","Diagnostics will run when the document is saved."]},"intelephense.compatibility.correctForBaseClassStaticUnionTypes":{"description":"Resolves `BaseClass|static` union types to `static` instead of `BaseClass`.","scope":"window","default":true,"type":"boolean"},"intelephense.diagnostics.languageConstraints":{"description":"Enables reporting of various language constraint errors.","scope":"window","default":true,"type":"boolean"},"intelephense.diagnostics.deprecated":{"description":"Enables deprecated diagnostics.","scope":"window","default":true,"type":"boolean"},"intelephense.compatibility.correctForArrayAccessArrayAndTraversableArrayUnionTypes":{"description":"Resolves `ArrayAccess` and `Traversable` implementations that are unioned with a typed array to generic syntax. eg `ArrayAccessOrTraversable|ElementType[]` => `ArrayAccessOrTraversable<mixed, ElementType>`.","scope":"window","default":true,"type":"boolean"},"intelephense.diagnostics.unusedSymbols":{"description":"Enables unused variable, private member, and import diagnostics.","scope":"window","default":true,"type":"boolean"},"intelephense.diagnostics.embeddedLanguages":{"description":"Enables diagnostics in embedded languages.","scope":"window","default":true,"type":"boolean"},"intelephense.diagnostics.unexpectedTokens":{"description":"Enables unexpected token diagnostics.","scope":"window","default":true,"type":"boolean"},"intelephense.diagnostics.undefinedSymbols":{"description":"DEPRECATED. Use the setting for each symbol category.","scope":"window","default":true,"type":"boolean"},"intelephense.diagnostics.duplicateSymbols":{"description":"Enables duplicate symbol diagnostics.","scope":"window","default":true,"type":"boolean"},"intelephense.diagnostics.undefinedVariables":{"description":"Enables undefined variable diagnostics.","scope":"window","default":true,"type":"boolean"},"intelephense.diagnostics.argumentCount":{"description":"Enables argument count diagnostics.","scope":"window","default":true,"type":"boolean"},"intelephense.diagnostics.undefinedTypes":{"description":"Enables undefined class, interface and trait diagnostics.","scope":"window","default":true,"type":"boolean"},"intelephense.diagnostics.typeErrors":{"description":"Enables diagnostics on type compatibility of arguments, property assignments, and return statements where types have been declared.","scope":"window","default":true,"type":"boolean"},"intelephense.diagnostics.undefinedFunctions":{"description":"Enables undefined function diagnostics.","scope":"window","default":true,"type":"boolean"},"intelephense.files.maxSize":{"description":"Maximum file size in bytes.","scope":"window","default":1000000,"type":"number"},"intelephense.diagnostics.undefinedConstants":{"description":"Enables undefined constant diagnostics.","scope":"window","default":true,"type":"boolean"},"intelephense.files.associations":{"description":"Configure glob patterns to make files available for language server features. Inherits from files.associations.","scope":"window","default":["*.php","*.phtml"],"type":"array"},"intelephense.diagnostics.undefinedClassConstants":{"description":"Enables undefined class constant diagnostics.","scope":"window","default":true,"type":"boolean"},"intelephense.diagnostics.implementationErrors":{"description":"Enables reporting of problems associated with method and class implementations. For example, unimplemented methods or method signature incompatibilities.","scope":"window","default":true,"type":"boolean"}},"title":"intelephense","type":"object"}