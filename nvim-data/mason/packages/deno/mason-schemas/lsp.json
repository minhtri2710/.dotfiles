{"properties":{"deno.suggest.autoImports":{"scope":"window","type":"boolean","default":true},"deno.suggest.completeFunctionCalls":{"scope":"window","type":"boolean","default":false},"deno.suggest.names":{"scope":"window","type":"boolean","default":true},"deno.suggest.paths":{"scope":"window","type":"boolean","default":true},"deno.suggest.imports.autoDiscover":{"markdownDescription":"If enabled, when new hosts\/origins are encountered that support import suggestions, you will be prompted to enable or disable it.  Defaults to `true`.","scope":"window","type":"boolean","default":true},"deno.codeLens.implementations":{"scope":"window","type":"boolean","examples":[true,false],"default":false,"markdownDescription":"Enables or disables the display of code lens information for implementations of items in the code."},"deno.codeLens.references":{"scope":"window","type":"boolean","examples":[true,false],"default":false,"markdownDescription":"Enables or disables the display of code lens information for references of items in the code."},"deno.testing.args":{"items":{"type":"string"},"type":"array","scope":"window","default":["--allow-all","--no-check"],"markdownDescription":"Arguments to use when running tests via the Test Explorer.  Defaults to `[ \"--allow-all\" ]`."},"deno.codeLens.referencesAllFunctions":{"scope":"window","type":"boolean","examples":[true,false],"default":false,"markdownDescription":"Enables or disables the display of code lens information for all functions in the code."},"deno.testing.enable":{"markdownDescription":"Enable the testing API for the language server. When folder is Deno enabled, tests will be available in the Test Explorer view.","scope":"window","type":"boolean","default":true},"deno.codeLens.test":{"markdownDescription":"Enables or disables the display of code lenses that allow running of individual tests in the code.","scope":"resource","type":"boolean","default":false},"deno.tlsCertificate":{"markdownDescription":"A path to a PEM certificate to use as the certificate authority when validating TLS certificates when fetching and caching remote resources. This is like using `--cert` on the Deno CLI and overrides the `DENO_CERT` environment variable if set.","scope":"window","type":"string","default":null},"deno.codeLens.testArgs":{"items":{"type":"string"},"type":"array","scope":"resource","default":["--allow-all","--no-check"],"markdownDescription":"Additional arguments to use with the run test code lens.  Defaults to `[ \"--allow-all\", \"--no-check\" ]`."},"deno.unsafelyIgnoreCertificateErrors":{"items":{"type":"string"},"type":"array","scope":"window","default":null,"markdownDescription":"**DANGER** disables verification of TLS certificates for the hosts provided. There is likely a better way to deal with any errors than use this option. This is like using `--unsafely-ignore-certificate-errors` in the Deno CLI."},"deno.unstable":{"scope":"window","type":"boolean","examples":[true,false],"default":false,"markdownDescription":"Controls if code will be type checked with Deno's unstable APIs. This is the equivalent to using `--unstable` on the command line.\n\n**Not recommended to be enabled globally.**"},"deno.config":{"scope":"window","type":"string","examples":[".\/deno.jsonc","\/path\/to\/deno.jsonc","C:\\path\\to\\deno.jsonc"],"default":null,"markdownDescription":"The file path to a configuration file. This is the equivalent to using `--config` on the command line. The path can be either be relative to the workspace, or an absolute path.\n\nIt is recommend you name it `deno.json` or `deno.jsonc`.\n\n**Not recommended to be set globally.**"},"deno.lint":{"scope":"window","type":"boolean","examples":[true,false],"default":true,"markdownDescription":"Controls if linting information will be provided by the Deno Language Server.\n\n**Not recommended to be enabled globally.**"},"deno.internalDebug":{"scope":"window","type":"boolean","examples":[true,false],"default":false,"markdownDescription":"Determines if the internal debugging information for the Deno language server will be logged to the _Deno Language Server_ console."},"deno.documentPreloadLimit":{"scope":"resource","type":"number","examples":[0,100,1000],"markdownDescription":"Maximum number of file system entries to traverse when finding scripts to preload into TypeScript on startup. Set this to 0 to disable document preloading.","default":1000},"deno.importMap":{"scope":"window","type":"string","examples":[".\/import_map.json","\/path\/to\/import_map.json","C:\\path\\to\\import_map.json"],"default":null,"markdownDescription":"The file path to an import map. This is the equivalent to using `--import-map` on the command line.\n\n[Import maps](https:\/\/deno.land\/manual@v1.6.0\/linking_to_external_code\/import_maps) provide a way to \"relocate\" modules based on their specifiers. The path can either be relative to the workspace, or an absolute path.\n\n**Not recommended to be set globally.**"},"deno.inlayHints.parameterNames.enabled":{"enum":["none","literals","all"],"scope":"resource","type":"string","enumDescriptions":["Disable inlay hints for parameters.","Display inlay hints for literal arguments.","Display inlay hints for all literal and non-literal arguments."],"markdownDescription":"Enable\/disable inlay hints for parameter names.","default":"none"},"deno.cache":{"markdownDescription":"A path to the cache directory for Deno. By default, the operating system's cache path plus `deno` is used, or the `DENO_DIR` environment variable, but if set, this path will be used instead.","scope":"window","type":"string","default":null},"deno.inlayHints.parameterNames.suppressWhenArgumentMatchesName":{"markdownDescription":"Do not display an inlay hint when the argument name matches the parameter.","scope":"resource","type":"boolean","default":true},"deno.inlayHints.parameterTypes.enabled":{"markdownDescription":"Enable\/disable inlay hints for implicit parameter types.","scope":"resource","type":"boolean","default":false},"deno.inlayHints.variableTypes.enabled":{"markdownDescription":"Enable\/disable inlay hints for implicit variable types.","scope":"resource","type":"boolean","default":false},"deno.inlayHints.variableTypes.suppressWhenTypeMatchesName":{"markdownDescription":"Suppress type hints where the variable name matches the implicit type.","scope":"resource","type":"boolean","default":true},"deno.inlayHints.propertyDeclarationTypes.enabled":{"markdownDescription":"Enable\/disable inlay hints for implicit property declarations.","scope":"resource","type":"boolean","default":false},"deno.inlayHints.functionLikeReturnTypes.enabled":{"markdownDescription":"Enable\/disable inlay hints for implicit function return types.","scope":"resource","type":"boolean","default":false},"deno.inlayHints.enumMemberValues.enabled":{"markdownDescription":"Enable\/disable inlay hints for enum values.","scope":"resource","type":"boolean","default":false},"deno.maxTsServerMemory":{"default":3072,"scope":"resource","type":"number","markdownDescription":"Maximum amount of memory the TypeScript isolate can use. Defaults to 3072 (3GB)."},"deno.enable":{"scope":"resource","type":"boolean","examples":[true,false],"default":false,"markdownDescription":"Controls if the Deno Language Server is enabled. When enabled, the extension will disable the built-in VSCode JavaScript and TypeScript language services, and will use the Deno Language Server instead.\n\nIf you want to enable only part of your workspace folder, consider using `deno.enablePaths` setting instead.\n\n**Not recommended to be enabled globally.**"},"deno.cacheOnSave":{"scope":"resource","type":"boolean","examples":[true,false],"default":false,"markdownDescription":"Controls if the extension should cache the active document's dependencies on save."},"deno.enablePaths":{"items":{"type":"string"},"type":"array","examples":[[".\/worker"]],"scope":"resource","default":[],"markdownDescription":"Enables the Deno Language Server for specific paths, instead of for the whole workspace folder. This will disable the built in TypeScript\/JavaScript language server for those paths.\n\nWhen a value is set, the value of `\"deno.enable\"` is ignored.\n\nThe workspace folder is used as the base for the supplied paths. If for example you have all your Deno code in `worker` path in your workspace, you can add an item with the value of `.\/worker`, and the Deno will only provide diagnostics for the files within `worker` or any of its sub paths.\n\n**Not recommended to be enabled in user settings.**"},"deno.suggest.imports.hosts":{"scope":"window","type":"object","examples":{"https:\/\/deno.land":true},"default":{"https:\/\/deno.land":true},"markdownDescription":"Controls which hosts are enabled for import suggestions."},"deno.certificateStores":{"items":{"type":"string"},"type":"array","scope":"window","default":null,"markdownDescription":"A list of root certificate stores used to validate TLS certificates when fetching and caching remote resources. This overrides the `DENO_TLS_CA_STORE` environment variable if set."},"deno.path":{"scope":"window","type":"string","examples":["\/usr\/bin\/deno","C:\\Program Files\\deno\\deno.exe"],"default":null,"markdownDescription":"A path to the `deno` CLI executable. By default, the extension looks for `deno` in the `PATH`, but if set, will use the path specified instead."}},"title":"Deno","type":"object"}